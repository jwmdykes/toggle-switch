import { ComponentPropsWithRef, useId, useState } from 'react';

function ToggleBackground(props: ComponentPropsWithRef<'svg'>) {
  return (
    <svg viewBox="0 0 700 319" version="1.1" xmlns="http://www.w3.org/2000/svg" style={{ fillRule: 'evenodd', clipRule: 'evenodd', strokeLinecap: 'round', strokeLinejoin: 'round', strokeMiterlimit: 1.5 }} {...props}>
      < g id="Sun" transform="matrix(3.12982,0,0,3.12982,-1295.3,-111.684)" >
        <circle cx="580" cy="90" r="30" style={{ fill: 'rgb(236,236,225)' }} />
      </g >
      <g id="Moon" transform="matrix(0.569728,0,0,0.569728,18.8242,19.2492)">
        <path d="M225.172,130.061C217.397,147.406 199.975,159.5 179.75,159.5C152.292,159.5 130,137.208 130,109.75C130,86.521 145.955,66.989 167.495,61.524C164.714,67.727 163.167,74.601 163.167,81.835C163.167,109.292 185.459,131.585 212.917,131.585C217.145,131.585 221.251,131.056 225.172,130.061Z" style={{ fill: 'rgb(203,201,229)' }} />
      </g>
      <g id="Stars" transform="matrix(1,0,0,1,130.656,-5.80789)">
        <g transform="matrix(1,0,0,1,-149.018,3.74342)">
          <path d="M72.102,93.319C94.568,77.948 95.725,79.564 169.132,67.329C174.897,66.368 199.833,115.176 183.571,131.438C182.994,132.015 173.465,146.309 172.597,147.609C158.901,168.154 122.032,187.217 89.077,143.074C125.566,139.756 166.651,210.478 178.373,216.339C190.786,222.545 326.878,227.6 338.934,179.375C348.399,141.512 336.444,86.799 277.713,79.458C266.621,78.071 169.071,77.321 239.016,67.329C251.689,65.519 307.468,62.339 321.607,81.19C337.696,102.642 335.855,104.474 332.003,166.091C326.547,253.39 328.58,266.772 281.178,274.672C176.431,292.13 85.395,254.491 81.343,238.286C78.867,228.382 76.138,229.581 74.413,219.227C64.95,162.45 127.92,172.13 252.3,149.92C261.249,148.322 336.327,137.229 340.667,128.55C346.557,116.768 253.009,72.979 237.284,60.398C192.712,24.741 96.358,20.554 92.317,36.718C89.159,49.35 226.371,64.005 247.102,112.379C254.229,129.008 230.513,147.37 219.957,163.204C216.292,168.702 176.349,201.831 145.452,211.718C137.94,214.122 21.109,238.006 7.416,215.184C-2.288,199.011 -5.951,143.918 25.32,120.464C128.393,43.16 219.481,48.542 227.465,24.59C229.675,17.962 192.804,11.5 169.71,15.349C163.31,16.416 140.623,18.862 141.987,14.771C143.131,11.339 141.837,20.585 181.838,36.141C356.324,103.996 486.956,77.851 512.201,96.784C527.522,108.275 491.89,102.239 460.798,185.151C458.934,190.123 436.524,258.986 414.594,289.689C406.661,300.794 401.296,331.843 416.327,339.358C424.849,343.62 374.742,318.566 302.548,304.127C243.645,292.347 243.504,294.173 183.571,290.844C176.772,290.466 169.605,291.876 175.485,287.956C223.885,255.688 627.9,254.642 594.214,119.887C593.348,116.423 576.735,83.196 575.155,80.035C565.292,60.31 404.7,47.219 382.828,53.468C414.003,57.719 414.08,54.751 445.204,60.976C470.453,66.026 431.078,83.143 424.412,103.138C424.351,103.322 397.772,146.673 397.267,148.187C395.537,153.377 394.868,152.927 367.234,189.771C366.054,191.344 336.307,214.581 331.426,218.649C250.385,286.183 227.404,258.305 234.974,246.949C237.235,243.557 321.987,191.417 333.736,185.151C350.818,176.04 533.974,78.357 516.822,26.9C504.585,-9.81 472.823,-0.771 469.462,0.91C459.612,5.835 440.471,-0.766 396.69,21.124C385.126,26.906 333.272,33.828 337.779,41.339C345.222,53.745 375.122,61.004 375.32,67.329C376.318,99.266 379.048,107.259 356.261,112.956C327.613,120.118 331.269,136.058 266.739,136.058C227.806,136.058 215.642,142.75 209.561,124.507C202.932,104.619 193.744,102.596 207.251,86.388C229.009,60.278 302.354,23.562 322.762,30.365" style={{ fill: 'none', stroke: 'white', strokeOpacity: 0.31, strokeWidth: '0.73px', strokeDasharray: '0,72.9,0,0,0,0' }} />
        </g>
        <g transform="matrix(-1,0,0,1,359.206,-7.27532)">
          <path d="M72.102,93.319C94.568,77.948 95.725,79.564 169.132,67.329C174.897,66.368 199.833,115.176 183.571,131.438C182.994,132.015 173.465,146.309 172.597,147.609C158.901,168.154 122.032,187.217 89.077,143.074C125.566,139.756 166.651,210.478 178.373,216.339C190.786,222.545 326.878,227.6 338.934,179.375C348.399,141.512 336.444,86.799 277.713,79.458C266.621,78.071 169.071,77.321 239.016,67.329C251.689,65.519 307.468,62.339 321.607,81.19C337.696,102.642 335.855,104.474 332.003,166.091C326.547,253.39 328.58,266.772 281.178,274.672C176.431,292.13 85.395,254.491 81.343,238.286C78.867,228.382 76.138,229.581 74.413,219.227C64.95,162.45 127.92,172.13 252.3,149.92C261.249,148.322 336.327,137.229 340.667,128.55C346.557,116.768 253.009,72.979 237.284,60.398C192.712,24.741 96.358,20.554 92.317,36.718C89.159,49.35 226.371,64.005 247.102,112.379C254.229,129.008 230.513,147.37 219.957,163.204C216.292,168.702 176.349,201.831 145.452,211.718C137.94,214.122 21.109,238.006 7.416,215.184C-2.288,199.011 -5.951,143.918 25.32,120.464C128.393,43.16 219.481,48.542 227.465,24.59C229.675,17.962 192.804,11.5 169.71,15.349C163.31,16.416 140.623,18.862 141.987,14.771C143.131,11.339 141.837,20.585 181.838,36.141C356.324,103.996 486.956,77.851 512.201,96.784C527.522,108.275 491.89,102.239 460.798,185.151C458.934,190.123 436.524,258.986 414.594,289.689C406.661,300.794 401.296,331.843 416.327,339.358C424.849,343.62 374.742,318.566 302.548,304.127C243.645,292.347 243.504,294.173 183.571,290.844C176.772,290.466 169.605,291.876 175.485,287.956C223.885,255.688 627.9,254.642 594.214,119.887C593.348,116.423 576.735,83.196 575.155,80.035C565.292,60.31 404.7,47.219 382.828,53.468C414.003,57.719 414.08,54.751 445.204,60.976C470.453,66.026 431.078,83.143 424.412,103.138C424.351,103.322 397.772,146.673 397.267,148.187C395.537,153.377 394.868,152.927 367.234,189.771C366.054,191.344 336.307,214.581 331.426,218.649C250.385,286.183 227.404,258.305 234.974,246.949C237.235,243.557 321.987,191.417 333.736,185.151C350.818,176.04 533.974,78.357 516.822,26.9C504.585,-9.81 472.823,-0.771 469.462,0.91C459.612,5.835 440.471,-0.766 396.69,21.124C385.126,26.906 333.272,33.828 337.779,41.339C345.222,53.745 375.122,61.004 375.32,67.329C376.318,99.266 379.048,107.259 356.261,112.956C327.613,120.118 331.269,136.058 266.739,136.058C227.806,136.058 215.642,142.75 209.561,124.507C202.932,104.619 193.744,102.596 207.251,86.388C229.009,60.278 302.354,23.562 322.762,30.365" style={{
            fill: 'none',
            stroke: 'rgb(255, 250, 228)',
            strokeOpacity: 0.65,
            strokeWidth: '1.43px',
            strokeDasharray: '0, 142.68, 0, 0, 0, 0',
          }} />
        </g>
      </g>
      <g id="Mountains">
        <clipPath id="_clip1">
          <rect x="0" y="107.033" width="700" height="211.967" />
        </clipPath>
        <g clip-path="url(#_clip1)">
          <path id="_4" d="M-50,220C-50,220 -19.631,180.169 30,174.756C58.671,171.629 91.609,160.617 119.602,159.5C152.268,158.197 165.616,138.69 190,130C219.677,119.424 233.712,104.166 250,107.5C302.167,118.177 279.984,115.049 310,120C338.708,124.736 344.695,143.162 390,150C423.747,155.094 446.443,142.645 480,150C520.923,158.969 512.202,154.906 560,160C607.569,165.07 609.702,173.531 630,180C659.535,189.413 662.827,206.656 700,210C739.937,213.593 740,350 740,350L-40,370L-50,220Z" style={{ fill: 'rgb(56,53,87)' }} />
          <g id="_3">
            <g transform="matrix(1,0,0,0.909595,30,7.18088)">
              <path d="M700,194.98C700,194.98 700.601,184.794 680,180C665.81,176.698 662.815,169.361 653.264,170C649.71,170.238 645.745,169.056 640,170C628.287,171.924 623.837,177.111 615,176.949C610.636,176.869 606.267,179.346 600,180C582.856,181.79 586.351,189.88 567.207,189.98C553.498,190.052 547.343,183.788 535,186.709C531.107,187.63 526.787,187.836 521.92,190C511.492,194.638 504.362,198.35 495,198.555C489.697,198.672 485.082,202.34 480,206.143C474.163,210.511 466.073,212.129 460,215.959C455.433,218.839 448.532,218.55 445,219C438.918,219.775 434.183,225.711 424.971,228.097C417.226,230.104 416.211,241.743 409.193,240C396.847,236.935 370.067,242.696 360,250.103C349.933,257.511 340,380 340,380L720,394.962L700,194.98Z" style={{ fill: 'rgb(49,46,79)' }} />
            </g>
            <g transform="matrix(1,0,0,1,-1.42109e-14,34.962)">
              <path d="M0,156.924C0,156.924 7.725,152.776 30,152.36C46.535,152.051 48.519,157.13 60,156.743C65.172,156.569 70.764,163.248 80,159.5C90.646,155.179 99.969,156 106.011,151.761C113.384,146.588 123.794,142.495 134.72,146.924C148.273,152.418 153.246,159.498 173.034,166.924C199.03,176.68 214.075,189.973 215.845,211.235C217.552,231.758 220,360 220,360L0,360L0,156.924Z" style={{ fill: 'rgb(49,46,79)' }} />
            </g>
          </g>
          <path id="_2" d="M0,260C0,260 27.052,233.608 60,230C92.948,226.392 97.422,227.024 110,230C122.578,232.976 138.58,234.724 150,234.943C161.42,235.162 178.657,243.361 200,230C210.634,223.343 237.969,222.852 250,220C263.384,216.827 277.999,210.946 300,210C313.032,209.439 346.369,198.747 360,200C368.596,200.79 380.616,200.865 390,206.201C412.18,218.811 402.653,210.594 420,220C438.323,229.936 442.977,234.637 460,240C477.023,245.363 507.01,259.616 520,270C532.99,280.384 527.874,280.636 540,287.481C552.126,294.326 580,350.823 580,350.823L-10,350L0,260Z" style={{ fill: 'rgb(38,36,60)' }} />
          <g id="_1" >
            <path d="M-80,310C-80,310 -36.487,269.246 20,260C76.487,250.754 86.229,229.493 110,250C133.771,270.507 170,290 170,290C170,290 242.525,288.48 280,319C317.475,349.52 -100,360 -100,360L-80,310Z" style={{ fill: 'rgb(30,30,39)' }} />
            <path d="M700,300C706.865,298.474 697.485,290.002 678.91,287.481C669.641,286.223 660.33,278.493 650,271.839C642.613,267.081 633.946,258.272 620,261.817C608.665,264.698 596.86,262.503 590,270C580.698,280.166 568.775,282.48 560,283.695C532.125,287.553 521.827,292.515 500,300.683C471.55,311.33 441.413,305.279 420,310C398.587,314.721 370,337.321 370,337.321L710,340L700,300Z" style={{ fill: 'rgb(30,30,39)' }} />
          </g>
        </g>
      </g>
    </svg >

  );
}

function Toggle() {
  const toggleId = useId();
  const [isChecked, setIsChecked] = useState(false); // To control initial state

  return (
    <>
      <input
        type="checkbox"
        id={toggleId}
        className="sr-only peer"
        aria-label="Toggle"
        checked={isChecked}
        onChange={() => setIsChecked((prev) => !prev)}
      />
      <label htmlFor={toggleId} className="cursor-pointer">
        <div className=" text-base w-[700px] rounded-full p-[0.8em] bg-conic from-bg-bottom via-bg-top to-bg-bottom shadow-glow">
          <div
            className='z-0 relative shadow-groove rounded-full overflow-hidden p-[1.2em]'
          >
            <ToggleBackground className={`-z-10 absolute top-0 left-0 bg-linear-to-l w-full ${isChecked ? 'from-night-top to-night-bottom' : 'from-day-top to-day-bottom'}`} />
            <div
              className={`border-[0.12em] border-dark-border bg-linear-to-r from-bg-top to-bg-bottom rounded-full w-2/5 aspect-square shadow-multiple ${isChecked && 'translate-x-[150%]'
                } transition-all duration-300 ease-in-out`}
            ></div>
          </div>
        </div>
      </label >
    </>
  );
}

function App() {
  return (
    <div className="bg-linear-to-b from-bg-top to-bg-bottom h-dvh flex items-center justify-center">
      <Toggle />
    </div>
  );
}

export default App;
